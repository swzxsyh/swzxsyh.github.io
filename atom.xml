<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>swzxsyh</title>
  
  <subtitle>--笔记</subtitle>
  <link href="https://swzxsyh.github.io/atom.xml" rel="self"/>
  
  <link href="https://swzxsyh.github.io/"/>
  <updated>2023-03-02T18:55:05.504Z</updated>
  <id>https://swzxsyh.github.io/</id>
  
  <author>
    <name>swzxsyh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 记录</title>
    <link href="https://swzxsyh.github.io/2023/03/03/LeetCode-Record/"/>
    <id>https://swzxsyh.github.io/2023/03/03/LeetCode-Record/</id>
    <published>2023-03-02T18:44:57.000Z</published>
    <updated>2023-03-02T18:55:05.504Z</updated>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;记录刷题记录相关&lt;/li&gt;
&lt;li&gt;Base Structure&lt;/li&gt;
&lt;li&gt;Algorithm&lt;/li&gt;
&lt;li&gt;LeetCode&lt;/li&gt;
&lt;li&gt;Other&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>垃圾回收的算法与实现 笔记 Part1</title>
    <link href="https://swzxsyh.github.io/2023/02/16/Garbage-Cllection-Algorithms-And-Implementations-P1/"/>
    <id>https://swzxsyh.github.io/2023/02/16/Garbage-Cllection-Algorithms-And-Implementations-P1/</id>
    <published>2023-02-15T17:30:37.000Z</published>
    <updated>2023-02-17T07:08:21.807Z</updated>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;基本概念&lt;/li&gt;
&lt;li&gt;底层算法&lt;/li&gt;
&lt;li&gt;TODO状态&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>面试题收集</title>
    <link href="https://swzxsyh.github.io/2023/02/12/Collection-InterviewQuestion/"/>
    <id>https://swzxsyh.github.io/2023/02/12/Collection-InterviewQuestion/</id>
    <published>2023-02-11T22:05:05.000Z</published>
    <updated>2023-03-04T21:12:18.231Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Java面试题&quot;&gt;&lt;a href=&quot;#Java面试题&quot; class=&quot;headerlink&quot; title=&quot;Java面试题&quot;&gt;&lt;/a&gt;Java面试题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Specification&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Spring&lt;/li&gt;
&lt;li&gt;MQ&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;ES&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;li&gt;Tools&lt;/li&gt;
&lt;li&gt;Theory&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring 事务</title>
    <link href="https://swzxsyh.github.io/2023/02/09/Spring-Transaction/"/>
    <id>https://swzxsyh.github.io/2023/02/09/Spring-Transaction/</id>
    <published>2023-02-08T18:29:28.000Z</published>
    <updated>2023-02-11T22:02:19.615Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Transaction&quot;&gt;&lt;a href=&quot;#Transaction&quot; class=&quot;headerlink&quot; title=&quot;Transaction&quot;&gt;&lt;/a&gt;Transaction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;JDBC事务&lt;/li&gt;
&lt;li&gt;Spring 声明式事务&lt;/li&gt;
&lt;li&gt;Spring 编程式事务&lt;/li&gt;
&lt;li&gt;Spring 声明式事务-事务失效&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一图了解云服务类型Iaas/SaaS/Paas</title>
    <link href="https://swzxsyh.github.io/2023/02/01/Know-Cloud-Computing-Type-In-One-Pic/"/>
    <id>https://swzxsyh.github.io/2023/02/01/Know-Cloud-Computing-Type-In-One-Pic/</id>
    <published>2023-01-31T17:15:33.000Z</published>
    <updated>2023-01-31T18:14:13.105Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Cloud-Computing&quot;&gt;&lt;a href=&quot;#Cloud-Computing&quot; class=&quot;headerlink&quot; title=&quot;Cloud Computing&quot;&gt;&lt;/a&gt;Cloud Computing&lt;/h1&gt;&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-cly1{text-align:left;vertical-align:middle}
.tg .tg-wa1i{font-weight:bold;text-align:center;vertical-align:middle}
.tg .tg-nrix{text-align:center;vertical-align:middle}
&lt;/style&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-cly1&quot;&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-wa1i&quot;&gt;云计算&lt;/th&gt;
    &lt;th class=&quot;tg-nrix&quot; colspan=&quot;3&quot;&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;9&quot;&gt;On Premises&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Application 应用&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;5&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;2&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;9&quot;&gt;SaaS (Software as a Service)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Data 数据&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Runtime 运行时&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;7&quot;&gt;PaaS (Platform as a Service)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Middleware 中间件&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;OS&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Virtualization 虚拟化&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;4&quot;&gt;Iaas (Infrastructure as a Service)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Server 服务器&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Storage 存储&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;Network 网络&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LMAX-Disruptor Learn</title>
    <link href="https://swzxsyh.github.io/2023/01/29/Disruptor/"/>
    <id>https://swzxsyh.github.io/2023/01/29/Disruptor/</id>
    <published>2023-01-28T19:43:00.000Z</published>
    <updated>2023-02-02T19:17:59.949Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA Thread Start与Run调用</title>
    <link href="https://swzxsyh.github.io/2023/01/10/JAVA-Thread-Start-Run/"/>
    <id>https://swzxsyh.github.io/2023/01/10/JAVA-Thread-Start-Run/</id>
    <published>2023-01-09T20:29:28.000Z</published>
    <updated>2023-02-25T15:54:30.008Z</updated>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;start() &amp;amp;&amp;amp; run() 源码&lt;/li&gt;
&lt;li&gt;区别&lt;/li&gt;
&lt;li&gt;Demo及Demo遇到的问题 (Method Reference)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h1&gt;&lt;h2 id=&quot;Source-Code&quot;&gt;&lt;a href=&quot;#Source-Code&quot; class=&quot;headerlink&quot; title=&quot;Source Code&quot;&gt;&lt;/a&gt;Source Code&lt;/h2&gt;&lt;h3 id=&quot;Thread-start&quot;&gt;&lt;a href=&quot;#Thread-start&quot; class=&quot;headerlink&quot; title=&quot;Thread start()&quot;&gt;&lt;/a&gt;Thread start()&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Causes this thread to begin execution; the Java Virtual Machine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * calls the &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; method of this thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The result is that two threads are running concurrently: the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * current thread (which returns from the call to the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;code&amp;gt;start&amp;lt;/code&amp;gt; method) and the other thread (which executes its&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; method).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * It is never legal to start a thread more than once.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * In particular, a thread may not be restarted once it has completed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * execution.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@exception&lt;/span&gt;  IllegalThreadStateException  if the thread was already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *               started.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt;        #run()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt;        #stop()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         * This method is not invoked for the main method thread or &amp;quot;system&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         * group threads created/set up by the VM. Any new functionality added&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         * to this method in the future may have to also be added to the VM.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         * A zero status value corresponds to state &amp;quot;NEW&amp;quot;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (threadStatus != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;IllegalThreadStateException&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* Notify the group that this thread is about to be started&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         * so that it can be added to the group&amp;#x27;s list of threads&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;         * and the group&amp;#x27;s unstarted count can be decremented. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  group.add(&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;started&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start0();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    started = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!started) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        group.threadStartFailed(&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Throwable ignore) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/* do nothing. If start0 threw a Throwable then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                  it will be passed up the call stack */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Thread-run&quot;&gt;&lt;a href=&quot;#Thread-run&quot; class=&quot;headerlink&quot; title=&quot;Thread run()&quot;&gt;&lt;/a&gt;Thread run()&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * If this thread was constructed using a separate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;code&amp;gt;Runnable&amp;lt;/code&amp;gt; run object, then that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;code&amp;gt;Runnable&amp;lt;/code&amp;gt; object&amp;#x27;s &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; method is called;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * otherwise, this method does nothing and returns.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Subclasses of &amp;lt;code&amp;gt;Thread&amp;lt;/code&amp;gt; should override this method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt;     #start()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt;     #stop()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt;     #Thread(ThreadGroup, Runnable, String)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (target != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target.run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;Diff&quot;&gt;&lt;a href=&quot;#Diff&quot; class=&quot;headerlink&quot; title=&quot;Diff&quot;&gt;&lt;/a&gt;Diff&lt;/h2&gt;&lt;p&gt;start() 方法是真正的启动方法，是并行调用的&lt;/p&gt;
&lt;p&gt;run()是Thread中的一个方法，是串行调用的&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java @FunctionalInterface</title>
    <link href="https://swzxsyh.github.io/2022/12/20/Java-FunctionalInterface/"/>
    <id>https://swzxsyh.github.io/2022/12/20/Java-FunctionalInterface/</id>
    <published>2022-12-19T17:29:05.000Z</published>
    <updated>2022-12-29T18:45:43.758Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java 泛型</title>
    <link href="https://swzxsyh.github.io/2022/12/20/Java-Generic/"/>
    <id>https://swzxsyh.github.io/2022/12/20/Java-Generic/</id>
    <published>2022-12-19T17:28:29.000Z</published>
    <updated>2023-02-25T20:40:45.260Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis-原理</title>
    <link href="https://swzxsyh.github.io/2022/11/21/MyBatis-Principle/"/>
    <id>https://swzxsyh.github.io/2022/11/21/MyBatis-Principle/</id>
    <published>2022-11-21T01:06:18.000Z</published>
    <updated>2022-11-21T01:37:10.179Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-Cache</title>
    <link href="https://swzxsyh.github.io/2022/11/21/Spring-Cache/"/>
    <id>https://swzxsyh.github.io/2022/11/21/Spring-Cache/</id>
    <published>2022-11-20T21:32:47.000Z</published>
    <updated>2022-11-21T01:04:56.509Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring缓存&quot;&gt;&lt;a href=&quot;#Spring缓存&quot; class=&quot;headerlink&quot; title=&quot;Spring缓存&quot;&gt;&lt;/a&gt;Spring缓存&lt;/h1&gt;&lt;h2 id=&quot;为什么需要缓存&quot;&gt;&lt;a href=&quot;#为什么需要缓存&quot; class=&quot;headerlink&quot; title=&quot;为什么需要缓存&quot;&gt;&lt;/a&gt;为什么需要缓存&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;减轻服务器压力&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;客户端缓存&lt;/td&gt;
&lt;td&gt;CDN对象存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接入服务器 NGIX缓存&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用服务器Tomcat Mybatis &amp;amp;&amp;amp; Hibernate缓存&lt;/td&gt;
&lt;td&gt;分布式缓存&amp;#x2F;Redis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;Spring-Cache&quot;&gt;&lt;a href=&quot;#Spring-Cache&quot; class=&quot;headerlink&quot; title=&quot;Spring Cache&quot;&gt;&lt;/a&gt;Spring Cache&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Spring Cache 是Spring 提供的一整套的缓存解决方案(JSR- 107)，&lt;/li&gt;
&lt;li&gt;提供一整套的接口和代码规范、配置、注解等，用于整合各种缓 存方案，如Redis、Caffeine、Guava Cache、Ehcache&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不推荐原因&quot;&gt;&lt;a href=&quot;#不推荐原因&quot; class=&quot;headerlink&quot; title=&quot;不推荐原因&quot;&gt;&lt;/a&gt;不推荐原因&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;无法测试：无法进行切片测试&lt;/li&gt;
&lt;li&gt;不支持复杂结构，只能进行简单对象查询存储&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MYSQL-InnoDB存储</title>
    <link href="https://swzxsyh.github.io/2022/10/27/MYSQL-InnoDB%E5%AD%98%E5%82%A8/"/>
    <id>https://swzxsyh.github.io/2022/10/27/MYSQL-InnoDB%E5%AD%98%E5%82%A8/</id>
    <published>2022-10-26T21:56:50.000Z</published>
    <updated>2022-11-10T00:25:15.631Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;MySQL存储结构&quot;&gt;&lt;a href=&quot;#MySQL存储结构&quot; class=&quot;headerlink&quot; title=&quot;MySQL存储结构&quot;&gt;&lt;/a&gt;MySQL存储结构&lt;/h1&gt;&lt;h2 id=&quot;InnoDB存储&quot;&gt;&lt;a href=&quot;#InnoDB存储&quot; class=&quot;headerlink&quot; title=&quot;InnoDB存储&quot;&gt;&lt;/a&gt;InnoDB存储&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;表-&amp;gt;段-&amp;gt;区-&amp;gt;页-&amp;gt;行&lt;/p&gt;
&lt;p&gt;在数据库中,不论读哪一行数据,还是读多行数据,都是将这些行所在的页进行加载。也就是存储空间的基本单位就是页。&lt;/p&gt;
&lt;p&gt;一个页就是一颗B+树的节点,数据库I&amp;#x2F;O操作的最小单位是页,与数据库相关的内容都会存储在页的结构里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/27/MYSQL-InnoDB%E5%AD%98%E5%82%A8/1629471915.png&quot; alt=&quot;1629471915&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux设置忘记Wi-Fi SSID</title>
    <link href="https://swzxsyh.github.io/2022/10/27/Linux-How-To-Forget-WIFI-SSID/"/>
    <id>https://swzxsyh.github.io/2022/10/27/Linux-How-To-Forget-WIFI-SSID/</id>
    <published>2022-10-26T21:19:57.000Z</published>
    <updated>2022-10-26T21:36:27.199Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux如何设置忘记网络&quot;&gt;&lt;a href=&quot;#Linux如何设置忘记网络&quot; class=&quot;headerlink&quot; title=&quot;Linux如何设置忘记网络&quot;&gt;&lt;/a&gt;Linux如何设置忘记网络&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;PI (Debian OS)同时连接2.4G与5G网络，5G不稳定需删除SSID，记录删除方法&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除SSID方法&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看当前记录的SSID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nmcli -t -f TYPE,UUID,NAME con &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 查询结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  802-11-wireless:12345678-31d1-51e7-a60e-3a52e52b4495:YourWifiName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除需要处理的UUID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sudo nmcli c delete 12345678-31d1-51e7-a60e-3a52e52b4495&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>GOF23-Singleton</title>
    <link href="https://swzxsyh.github.io/2022/09/06/GOF23-Singleton/"/>
    <id>https://swzxsyh.github.io/2022/09/06/GOF23-Singleton/</id>
    <published>2022-09-05T20:58:48.000Z</published>
    <updated>2023-02-08T20:36:06.372Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Singleton-Pattern&quot;&gt;&lt;a href=&quot;#Singleton-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Singleton Pattern&quot;&gt;&lt;/a&gt;Singleton Pattern&lt;/h1&gt;&lt;h2 id=&quot;Conceptual&quot;&gt;&lt;a href=&quot;#Conceptual&quot; class=&quot;headerlink&quot; title=&quot;Conceptual&quot;&gt;&lt;/a&gt;Conceptual&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;保证一个类只有一个实例&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;为该实例提供一个全局访问节点&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论何时调用该方法，它总是会返回相同的对象&lt;/p&gt;
&lt;h2 id=&quot;Pros-amp-Cons&quot;&gt;&lt;a href=&quot;#Pros-amp-Cons&quot; class=&quot;headerlink&quot; title=&quot;Pros &amp;amp; Cons&quot;&gt;&lt;/a&gt;Pros &amp;amp; Cons&lt;/h2&gt;&lt;h3 id=&quot;Pros&quot;&gt;&lt;a href=&quot;#Pros&quot; class=&quot;headerlink&quot; title=&quot;Pros&quot;&gt;&lt;/a&gt;Pros&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;你可以保证一个类只有一个实例，提供了一个指向该实例的全局访问节点&lt;/li&gt;
&lt;li&gt;仅在首次请求单例对象时对其进行初始化&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot Run &amp;&amp; Spring Context refresh()</title>
    <link href="https://swzxsyh.github.io/2022/08/18/SpringContext-refresh/"/>
    <id>https://swzxsyh.github.io/2022/08/18/SpringContext-refresh/</id>
    <published>2022-08-17T19:43:46.000Z</published>
    <updated>2022-11-25T02:43:11.276Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/08/18/SpringContext-refresh/AbstractApplicationContext.png&quot; alt=&quot;./AbstractApplicationContext&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 执行SpringAppllication的静态run方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SpringApplication.run(SampleTomcatApplication.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;Version&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spring-context-6.0.0-SNAPSHOT.jar&lt;/li&gt;
&lt;li&gt;spring-beans-5.3.15.jar&lt;/li&gt;
&lt;li&gt;spring-aop-6.0.0-SNAPSHOT.jar&lt;/li&gt;
&lt;li&gt;spring-core-6.0.0-SNAPSHOT.jar&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RPC初识</title>
    <link href="https://swzxsyh.github.io/2022/08/08/RPC/"/>
    <id>https://swzxsyh.github.io/2022/08/08/RPC/</id>
    <published>2022-08-07T18:23:37.000Z</published>
    <updated>2022-11-14T20:17:35.575Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;RPC&quot;&gt;&lt;a href=&quot;#RPC&quot; class=&quot;headerlink&quot; title=&quot;RPC&quot;&gt;&lt;/a&gt;RPC&lt;/h1&gt;&lt;p&gt;RPC-远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。&lt;/p&gt;
&lt;p&gt;RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。现在业界有很多开源的优秀 RPC 框架，例如 Spring Cloud、Dubbo、Thrift 等。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构 Data Structure</title>
    <link href="https://swzxsyh.github.io/2022/08/04/Data-Structure/"/>
    <id>https://swzxsyh.github.io/2022/08/04/Data-Structure/</id>
    <published>2022-08-03T16:41:05.000Z</published>
    <updated>2022-08-09T20:40:38.065Z</updated>
    
    
    <summary type="html">&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-nrix{text-align:center;vertical-align:middle}
&lt;/style&gt;
&lt;table class=&quot;tg&quot;&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;9&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;数据结构&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;6&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;数据的逻辑结构&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;4&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;线性结构&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;线性表&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;栈（特殊线性表）&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;队列（特殊线性表）&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;字符串、数组、广义表&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;非线性结构&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;树形结构&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;图形结构&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot; rowspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;数据的存储结构&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; colspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decorcolor:black&quot;&gt;顺序存储&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot; colspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decorcolor:black&quot;&gt;链式存储&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-nrix&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;数据的运算&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-nrix&quot; colspan=&quot;2&quot;&gt;&lt;span style=&quot;font-weight:400;font-style:normal;text-decoration:none;&quot;&gt;插入、修改、检索、删除、排序&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tablesgenerator.com/html_tables#&quot;&gt;HTML Tables generator – TablesGenerator.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TODO状态！！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker-Kubernetes关联与演变</title>
    <link href="https://swzxsyh.github.io/2022/08/02/Docker-K8S/"/>
    <id>https://swzxsyh.github.io/2022/08/02/Docker-K8S/</id>
    <published>2022-08-02T14:21:38.000Z</published>
    <updated>2022-08-09T20:40:38.068Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Docker-Kubernetes关联与演变&quot;&gt;&lt;a href=&quot;#Docker-Kubernetes关联与演变&quot; class=&quot;headerlink&quot; title=&quot;Docker-Kubernetes关联与演变&quot;&gt;&lt;/a&gt;Docker-Kubernetes关联与演变&lt;/h1&gt;&lt;h2 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h2&gt;&lt;h3 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker&quot;&gt;&lt;/a&gt;什么是Docker&lt;/h3&gt;&lt;p&gt;是指容器化技术，用于支持创建和使用 &lt;a href=&quot;https://www.redhat.com/zh/topics/containers&quot;&gt;Linux® 容器&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么使用Docker&quot;&gt;&lt;a href=&quot;#为什么使用Docker&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Docker&quot;&gt;&lt;/a&gt;为什么使用Docker&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更高效的利用系统资源&lt;/li&gt;
&lt;li&gt;更快速的启动时间&lt;/li&gt;
&lt;li&gt;一致的运行环境&lt;/li&gt;
&lt;li&gt;持续交付和部署&lt;/li&gt;
&lt;li&gt;更轻松的迁移&lt;/li&gt;
&lt;li&gt;更轻松的维护和扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Docker基本概念&quot;&gt;&lt;a href=&quot;#Docker基本概念&quot; class=&quot;headerlink&quot; title=&quot;Docker基本概念&quot;&gt;&lt;/a&gt;Docker基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;镜像（&lt;code&gt;Image&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容器（&lt;code&gt;Container&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;容器的实质是进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;仓库（&lt;code&gt;Repository&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="https://swzxsyh.github.io/2022/08/02/Distributed-Transaction/"/>
    <id>https://swzxsyh.github.io/2022/08/02/Distributed-Transaction/</id>
    <published>2022-08-01T19:27:24.000Z</published>
    <updated>2022-08-09T20:40:38.067Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;分布式事务&quot;&gt;&lt;a href=&quot;#分布式事务&quot; class=&quot;headerlink&quot; title=&quot;分布式事务&quot;&gt;&lt;/a&gt;分布式事务&lt;/h1&gt;&lt;h2 id=&quot;什么是分布式系统&quot;&gt;&lt;a href=&quot;#什么是分布式系统&quot; class=&quot;headerlink&quot; title=&quot;什么是分布式系统&quot;&gt;&lt;/a&gt;什么是分布式系统&lt;/h2&gt;&lt;p&gt;部署在不同结点上的系统通过网络交互来完成协同工作的系统&lt;/p&gt;
&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;h3 id=&quot;什么是事务&quot;&gt;&lt;a href=&quot;#什么是事务&quot; class=&quot;headerlink&quot; title=&quot;什么是事务&quot;&gt;&lt;/a&gt;什么是事务&lt;/h3&gt;&lt;p&gt;事务是指由一组操作组成的一个工作单元，这个工作单元具有原子性（atomicity）、一致性（consistency）、隔离性（isolation）和持久性（durability）。&lt;/p&gt;
&lt;h3 id=&quot;什么是本地事务&quot;&gt;&lt;a href=&quot;#什么是本地事务&quot; class=&quot;headerlink&quot; title=&quot;什么是本地事务&quot;&gt;&lt;/a&gt;什么是本地事务&lt;/h3&gt;&lt;p&gt;本地事务就是用关系数据库来控制事务，关系数据库通常都具有ACID特性，传统的单体应用通常会将数据全部存储在一个数据库中，会借助关系数据库来完成事务控制。&lt;/p&gt;
&lt;h3 id=&quot;什么是分布式事务&quot;&gt;&lt;a href=&quot;#什么是分布式事务&quot; class=&quot;headerlink&quot; title=&quot;什么是分布式事务&quot;&gt;&lt;/a&gt;什么是分布式事务&lt;/h3&gt;&lt;p&gt;在分布式系统中一次操作由多个系统协同完成，这种一次事务操作涉及多个系统通过网络协同完成的过程称为分布式事务。这里强调的是多个系统通过网络协同完成一个事务的过程，并不强调多个系统访问了不同的数据库，即使多个系统访问的是同一个数据库也是分布式事务，&lt;/p&gt;
&lt;p&gt;另外一种分布式事务的表现是，一个应用程序使用了多个数据源连接了不同的数据库，当一次事务需要操作多个数据源，此时也属于分布式事务，当系统作了数据库拆分后会出现此种情况&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>布隆过滤器 与 布谷鸟过滤器</title>
    <link href="https://swzxsyh.github.io/2022/07/19/Bloom-Filter-VS-Cuckoo-Filter/"/>
    <id>https://swzxsyh.github.io/2022/07/19/Bloom-Filter-VS-Cuckoo-Filter/</id>
    <published>2022-07-19T15:46:54.000Z</published>
    <updated>2022-08-09T20:40:38.059Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;布隆过滤器-Bloom-Filter&quot;&gt;&lt;a href=&quot;#布隆过滤器-Bloom-Filter&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器 Bloom Filter&quot;&gt;&lt;/a&gt;布隆过滤器 Bloom Filter&lt;/h1&gt;&lt;p&gt;大概的思路就是,当你请求的信息来的时候,先检查一下你查询的数据我这有没有,有的话将请求压给数据库,没有的话直接返回&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存入过程&lt;/p&gt;
&lt;p&gt;通过三个hash函数计算出三个哈希值，然后将三个值映射到数组中将0改成1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询过程&lt;/p&gt;
&lt;p&gt;通过三个hash函数计算出查询数据的哈希值，然后检查布隆过滤器对应位置上的值是否为1，如果有一个不为1表示该值不存在，如果都为1表示该值可能存在。（查询时间复杂度为O(k)，k为哈希函数个数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除过程&lt;/p&gt;
&lt;p&gt;不能进行删除，因为会删除掉其他数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新过程&lt;/p&gt;
&lt;p&gt;不能进行更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;h3 id=&quot;布隆过滤器基础版&quot;&gt;&lt;a href=&quot;#布隆过滤器基础版&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器基础版&quot;&gt;&lt;/a&gt;布隆过滤器基础版&lt;/h3&gt;&lt;p&gt;原理就是一个对一个key进行k个hash算法获取k个值，在比特数组中将这k个值散列后设定为1，然后查的时候如果特定的这几个位置都为1，那么布隆过滤器判断该key存在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/07/19/Bloom-Filter-VS-Cuckoo-Filter/94957b79c1faedcadc033ee1528a239a.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个bitmap用于记录，bitmap原始数值全都是0。当一个数据存进来的时候，用三个Hash函数分别计算三次Hash值,并且将bitmap对应的位置设置为1,上图中,bitmap 的1,3,6位置被标记为1,这时候如果一个数据请求过来,依然用之前的三个Hash函数计算Hash值,如果是同一个数据的话,势必依旧是映射到1,3,6位,那么就可以判断这个数据之前存储过,如果新的数据映射的三个位置,有一个匹配不上,假如映射到1,3,7位,由于7位是0,也就是这个数据之前并没有加入进数据库,所以直接返回。&lt;/p&gt;
&lt;p&gt;Redis的bitmap只支持2^32大小，对应到内存也就是512MB，误判率万分之一，可以放下2亿左右的数据，性能高，空间占用率及小，省去了大量无效的数据库连接。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
