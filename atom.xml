<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>swzxsyh</title>
  
  <subtitle>--笔记</subtitle>
  <link href="https://swzxsyh.github.io/atom.xml" rel="self"/>
  
  <link href="https://swzxsyh.github.io/"/>
  <updated>2022-07-14T17:08:02.071Z</updated>
  <id>https://swzxsyh.github.io/</id>
  
  <author>
    <name>swzxsyh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring-Container</title>
    <link href="https://swzxsyh.github.io/2022/07/14/Spring-Container/"/>
    <id>https://swzxsyh.github.io/2022/07/14/Spring-Container/</id>
    <published>2022-07-14T15:59:55.000Z</published>
    <updated>2022-07-14T17:08:02.071Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-容器是什么&quot;&gt;&lt;a href=&quot;#Spring-容器是什么&quot; class=&quot;headerlink&quot; title=&quot;Spring 容器是什么&quot;&gt;&lt;/a&gt;Spring 容器是什么&lt;/h1&gt;&lt;p&gt;Spring容器帮程序员处理了大量繁琐的过程，可以说Spring 容器是 Spring 框架的核心。&lt;/p&gt;
&lt;h2 id=&quot;Spring容器到底是什么&quot;&gt;&lt;a href=&quot;#Spring容器到底是什么&quot; class=&quot;headerlink&quot; title=&quot;Spring容器到底是什么&quot;&gt;&lt;/a&gt;Spring容器到底是什么&lt;/h2&gt;&lt;h3 id=&quot;从概念上讲&quot;&gt;&lt;a href=&quot;#从概念上讲&quot; class=&quot;headerlink&quot; title=&quot;从概念上讲&quot;&gt;&lt;/a&gt;从概念上讲&lt;/h3&gt;&lt;p&gt;Spring 容器是 Spring 框架的核心，是用来管理对象的。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。&lt;/p&gt;
&lt;h3 id=&quot;从具象化讲&quot;&gt;&lt;a href=&quot;#从具象化讲&quot; class=&quot;headerlink&quot; title=&quot;从具象化讲&quot;&gt;&lt;/a&gt;从具象化讲&lt;/h3&gt;&lt;p&gt;在java项目中，我们使用实现了org.springframework.context.ApplicationContext接口的实现类。在web项目中，我们使用spring.xml——Spring的配置文件。&lt;/p&gt;
&lt;h3 id=&quot;从代码上讲&quot;&gt;&lt;a href=&quot;#从代码上讲&quot; class=&quot;headerlink&quot; title=&quot;从代码上讲&quot;&gt;&lt;/a&gt;从代码上讲&lt;/h3&gt;&lt;p&gt;一个Spring容器就是某个实现了ApplicationContext接口的类的实例。也就是说，从代码层面，Spring容器其实就是一个ApplicationContext（一个实例化对象）。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SearchEngine-ElasticSearch</title>
    <link href="https://swzxsyh.github.io/2022/07/11/SearchEngine-ElasticSearch/"/>
    <id>https://swzxsyh.github.io/2022/07/11/SearchEngine-ElasticSearch/</id>
    <published>2022-07-10T16:06:35.000Z</published>
    <updated>2022-07-14T17:08:02.038Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch&quot;&gt;&lt;/a&gt;ElasticSearch&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Elasticsearch（简称ES）是一个分布式、可扩展、实时的搜索与数据分析引擎。ES不仅仅只是全文搜索，还支持结构化搜索、数据分析、复杂的语言处理、地理位置和对象间关联关系等。&lt;/p&gt;
&lt;p&gt;ES的底层依赖Lucene，Lucene可以说是当下最先进、高性能、全功能的搜索引擎库。但是Lucene仅仅只是一个库。为了充分发挥其功能，你需要使用Java并将Lucene直接集成到应用程序中。更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理，因为Lucene非常复杂——《ElasticSearch官方权威指南》。&lt;/p&gt;
&lt;p&gt;鉴于Lucene如此强大却难以上手的特点，诞生了ES。ES也是使用Java编写的，它的内部使用Lucene做索引与搜索，它的目的是隐藏Lucene的复杂性，取而代之的提供一套简单一致的RESTful API。&lt;/p&gt;
&lt;p&gt;总体来说，ES具有如下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个分布式的实时文档存储引擎，每个字段都可以被索引与搜索&lt;/li&gt;
&lt;li&gt;一个分布式实时分析搜索引擎，支持各种查询和聚合操作&lt;/li&gt;
&lt;li&gt;能胜任上百个服务节点的扩展，并可以支持PB级别的结构化或者非结构化数据&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA-Synchronized与ReentrantLock</title>
    <link href="https://swzxsyh.github.io/2022/07/08/JAVA-Synchronized%E4%B8%8EReentrantLock/"/>
    <id>https://swzxsyh.github.io/2022/07/08/JAVA-Synchronized%E4%B8%8EReentrantLock/</id>
    <published>2022-07-07T19:00:16.000Z</published>
    <updated>2022-07-14T17:08:01.635Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Lock&quot;&gt;&lt;a href=&quot;#Lock&quot; class=&quot;headerlink&quot; title=&quot;Lock&quot;&gt;&lt;/a&gt;Lock&lt;/h1&gt;&lt;h2 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;锁&lt;/h2&gt;&lt;h3 id=&quot;公平和非公平锁&quot;&gt;&lt;a href=&quot;#公平和非公平锁&quot; class=&quot;headerlink&quot; title=&quot;公平和非公平锁&quot;&gt;&lt;/a&gt;公平和非公平锁&lt;/h3&gt;&lt;p&gt;公平锁指的就是：在竞争环境下，先到临界区的线程比后到的线程一定更快地获取得到锁&lt;/p&gt;
&lt;p&gt;那非公平就很好理解了：先到临界区的线程未必比后到的线程更快地获取得到锁&lt;/p&gt;
&lt;h3 id=&quot;怎么实现公平和非公平锁？&quot;&gt;&lt;a href=&quot;#怎么实现公平和非公平锁？&quot; class=&quot;headerlink&quot; title=&quot;怎么实现公平和非公平锁？&quot;&gt;&lt;/a&gt;怎么实现公平和非公平锁？&lt;/h3&gt;&lt;p&gt;公平锁可以把竞争的线程放在一个先进先出的队列上&lt;/p&gt;
&lt;p&gt;只要持有锁的线程执行完了，唤醒队列的下一个线程去获取锁就好了&lt;/p&gt;
&lt;p&gt;非公平锁的概念上面已经提到了：后到的线程可能比前到临界区的线程获取得到锁&lt;/p&gt;
&lt;p&gt;那实现也很简单，线程先尝试能不能获取得到锁，如果获取得到锁了就执行同步代码了&lt;/p&gt;
&lt;p&gt;如果获取不到锁，那就再把这个线程放到队列呗&lt;/p&gt;
&lt;p&gt;所以公平和非公平的区别就是：线程执行同步代码块时，是否会去尝试获取锁。&lt;/p&gt;
&lt;p&gt;如果会尝试获取锁，那就是非公平的。如果不会尝试获取锁，直接进队列，再等待唤醒，那就是公平的。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-BeanFactory</title>
    <link href="https://swzxsyh.github.io/2022/07/08/Spring-BeanFactory/"/>
    <id>https://swzxsyh.github.io/2022/07/08/Spring-BeanFactory/</id>
    <published>2022-07-07T16:40:14.000Z</published>
    <updated>2022-07-14T17:08:02.058Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-IOC-BeanFactory&quot;&gt;&lt;a href=&quot;#Spring-IOC-BeanFactory&quot; class=&quot;headerlink&quot; title=&quot;Spring IOC BeanFactory&quot;&gt;&lt;/a&gt;Spring IOC BeanFactory&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/07/08/Spring-BeanFactory/BeanFactory.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-三级缓存</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Spring-%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Spring-%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</id>
    <published>2022-07-07T11:35:42.000Z</published>
    <updated>2022-07-14T17:08:02.080Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-三级缓存&quot;&gt;&lt;a href=&quot;#Spring-三级缓存&quot; class=&quot;headerlink&quot; title=&quot;Spring 三级缓存&quot;&gt;&lt;/a&gt;Spring 三级缓存&lt;/h1&gt;&lt;p&gt;Spring的三级缓存解决循环依赖问题&lt;/p&gt;
&lt;p&gt;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一级缓存，用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Cache of singleton objects: bean name to bean instance. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; singletonObjects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//二级缓存，提前曝光的单例对象的cache，存放原始的 bean 对象（尚未填充属性），用于解决循环依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Cache of early singleton objects: bean name to bean instance. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; earlySingletonObjects = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//三级缓存，单例对象工厂的cache，存放 bean 工厂对象，用于解决循环依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Cache of singleton factories: bean name to ObjectFactory. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt; singletonFactories = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;&lt;img src=&quot;/2022/07/07/Spring-%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/Spring.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot-生命周期</title>
    <link href="https://swzxsyh.github.io/2022/07/07/SpringBoot-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://swzxsyh.github.io/2022/07/07/SpringBoot-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-07-07T11:34:50.000Z</published>
    <updated>2022-07-14T17:08:02.131Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringBoot-生命周期&quot;&gt;&lt;a href=&quot;#SpringBoot-生命周期&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 生命周期&quot;&gt;&lt;/a&gt;SpringBoot 生命周期&lt;/h1&gt;&lt;p&gt;SpringBoot应用的生命周期，整体上可以分为SpringApplication初始化阶段、SpringApplication运行阶段、SpringApplication结束阶段、SpringBoot应用退出四个阶段。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-Bean生命周期</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-07-07T11:33:49.000Z</published>
    <updated>2022-07-14T17:08:02.067Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-Bean生命周期&quot;&gt;&lt;a href=&quot;#Spring-Bean生命周期&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean生命周期&quot;&gt;&lt;/a&gt;Spring Bean生命周期&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/07/07/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat-为什么要JAVA破坏双亲委派机制</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Tomcat-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81JAVA%E7%A0%B4%E5%9D%8F%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Tomcat-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81JAVA%E7%A0%B4%E5%9D%8F%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</id>
    <published>2022-07-07T09:22:30.000Z</published>
    <updated>2022-07-14T17:08:02.208Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Tomcat-为什么要JAVA破坏双亲委派机制&quot;&gt;&lt;a href=&quot;#Tomcat-为什么要JAVA破坏双亲委派机制&quot; class=&quot;headerlink&quot; title=&quot;Tomcat-为什么要JAVA破坏双亲委派机制&quot;&gt;&lt;/a&gt;Tomcat-为什么要JAVA破坏双亲委派机制&lt;/h1&gt;&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Tomcat本身也是一个Web应用程序&lt;/li&gt;
&lt;li&gt;不同Web程序依赖不同，向上查询时可能导致依赖版本异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打破双亲的机制，每个应用独立classloader其实自己做到隔离机制&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>String、StringBuffer、StringBuilder的区别</title>
    <link href="https://swzxsyh.github.io/2022/07/07/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://swzxsyh.github.io/2022/07/07/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-07-06T17:54:49.000Z</published>
    <updated>2022-07-14T17:08:02.206Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>堆和栈的区别</title>
    <link href="https://swzxsyh.github.io/2022/07/07/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://swzxsyh.github.io/2022/07/07/%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-07-06T17:54:41.000Z</published>
    <updated>2022-07-14T17:08:02.219Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>wait和sleep的区别</title>
    <link href="https://swzxsyh.github.io/2022/07/07/wait%E5%92%8Csleep%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://swzxsyh.github.io/2022/07/07/wait%E5%92%8Csleep%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-07-06T17:54:32.000Z</published>
    <updated>2022-07-14T17:08:02.218Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Synchronized和Lock的区别</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Synchronized%E5%92%8CLock%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Synchronized%E5%92%8CLock%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-07-06T17:54:21.000Z</published>
    <updated>2022-07-14T17:08:02.207Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat-组件</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Tomcat-%E7%BB%84%E4%BB%B6/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Tomcat-%E7%BB%84%E4%BB%B6/</id>
    <published>2022-07-06T17:41:37.000Z</published>
    <updated>2022-07-14T17:08:02.212Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat-责任链</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Tomcat-%E8%B4%A3%E4%BB%BB%E9%93%BE/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Tomcat-%E8%B4%A3%E4%BB%BB%E9%93%BE/</id>
    <published>2022-07-06T17:41:26.000Z</published>
    <updated>2022-07-14T17:08:02.214Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat-类加载器</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Tomcat-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Tomcat-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</id>
    <published>2022-07-06T17:41:12.000Z</published>
    <updated>2022-07-14T17:08:02.209Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-总述</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Spring-%E6%80%BB%E8%BF%B0/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Spring-%E6%80%BB%E8%BF%B0/</id>
    <published>2022-07-06T17:16:53.000Z</published>
    <updated>2022-07-14T17:08:02.115Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-总述&quot;&gt;&lt;a href=&quot;#Spring-总述&quot; class=&quot;headerlink&quot; title=&quot;Spring-总述&quot;&gt;&lt;/a&gt;Spring-总述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/07/07/Spring-%E6%80%BB%E8%BF%B0/Spring-ALL.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-PostProcessor &amp;&amp; Aware</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Spring-PostProcessor-Aware/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Spring-PostProcessor-Aware/</id>
    <published>2022-07-06T17:14:45.000Z</published>
    <updated>2022-07-14T17:08:02.078Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-ApplicationContext</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Spring-ApplicationContext/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Spring-ApplicationContext/</id>
    <published>2022-07-06T17:03:52.000Z</published>
    <updated>2022-07-14T17:08:02.057Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-ApplicationContext&quot;&gt;&lt;a href=&quot;#Spring-ApplicationContext&quot; class=&quot;headerlink&quot; title=&quot;Spring ApplicationContext&quot;&gt;&lt;/a&gt;Spring ApplicationContext&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ApplicationContext 是一个BeanFactory，但额外实现一些功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ApplicationContext管理Bean能力是由什么支持的&lt;/p&gt;
&lt;p&gt;使用DefaultListableBeanFactory实现ApplicationContext管理能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DefaultListableBeanFactory具有什么能力&lt;/p&gt;
&lt;p&gt;各种Post处理&lt;/p&gt;
&lt;p&gt;DefaultListableBeanFactory实现各种BeanDefinitionRegistry&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java-Web过滤器</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Java-Web%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Java-Web%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2022-07-06T17:00:25.000Z</published>
    <updated>2022-07-14T17:08:01.816Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-层次性依赖查找Bean</title>
    <link href="https://swzxsyh.github.io/2022/07/07/Spring-%E5%B1%82%E6%AC%A1%E6%80%A7%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BEBean/"/>
    <id>https://swzxsyh.github.io/2022/07/07/Spring-%E5%B1%82%E6%AC%A1%E6%80%A7%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BEBean/</id>
    <published>2022-07-06T16:50:43.000Z</published>
    <updated>2022-07-14T17:08:02.111Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-层次性依赖查找Bean&quot;&gt;&lt;a href=&quot;#Spring-层次性依赖查找Bean&quot; class=&quot;headerlink&quot; title=&quot;Spring 层次性依赖查找Bean&quot;&gt;&lt;/a&gt;Spring 层次性依赖查找Bean&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/07/07/Spring-%E5%B1%82%E6%AC%A1%E6%80%A7%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BEBean/1594224050.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
